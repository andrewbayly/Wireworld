TODO
- draw the board - DONE
- compute the next step - DONE
- scale up to an 800x600 board - is my algo fast enough??? - DONE
- loader
  - load computer file into memory, and see it run and generate primes
    - transform the .wi file into JSON - DONE
      - write a program transform which loads the file - DONE
        - and outputs a JSON: WIREWORLD = ["xxx" ... ]; 
    - load the JSON file into the browser
    - how fast is it?? 10-20 mins per prime
      1:08 - 2
      1:21 - 0
      1:22 - 3
      1:55 - 0
      1:57 - 5
  - write routine to clear the registers - DONE!
  - write routine that takes a set of byte codes and copies them into the registers - DONE!
  - test out with the primes program 
  - write the display program - DONE!
  - test out with the display program - DONE!
- write the assembler - DONE

- prototype the primes program in Wire and run on JS.
- translate the JS into Assembler ( & run it ).
- extend the Wire compiler accordingly

- write (console) - DONE
  - add write to grammar
  - add write to compiler
  - implement writeChecker in System, and write value to the console.
  - add a real 'console' on the screen where the writes come out.

- read (console) - DONE
  - add read to grammar
  - add read to compiler
  - sequence: 
     - read sets flag to 1 ( or 3 )
     - checkIO finds read flag, and gets value from queue
       and puts it into register 52, if there is nothing in the 
       queue, then write zero to 52
     - read copies 52 to destination
     - testing - set values in the read queue   
      

IDEAS
- loader - DONE!
  - loads a specific sequence of bytecodes into the machine, and lets it run. 
- simple programs
  - display a number, repeatedly - DONE!
  - counter - counts out the integers and displays them
  - fibonacci generator - generates the fibonacci sequence
- assembler - DONE!
  - translates assembly language instructions into byte code
- emulator
  - runs a sequence of byte-codes in JavaScript Virtual Machine
- User Input
  - allows user to enter values into the registers from the keyboard
    typically these will be values and/or the program counter enabling
    me to build a calculator that adds numbers and displays the result.
  - calculator  
- Wire
  - Write a High Level Language that compiles to assembler that can 
    be run on the computer itself. 
  - Wire will be a subset of JavaScript. This enables me to debug programs
    that I've written in Wire by compiling them as JavaScript together with 
    a standard library (also written in JavaScript).
  - let's start with a program displays values: - DONE!
      display(5555); 
      display(1); 
  - next ... fibonacci or counter - DONE!
  - prototype the primes program in JS
  - translate the JS into Assembler & run it.
  - use that as impetus to extending wire compiler.
- networking
  - I intend to add two operations to Wire x = read(), and write(x)
    which will read and write to ports on the computer. this
    will be implemented with two registers - 52 for data, and
    51 for info. The protocol on the info register would be something
    like: 
                                Usage
      0 - idle
      1 - read on port 1        read from console(1)
      2 - write on port 1       write to console(1)
      3 - read on port 2        read from network queue(2)
      4 - write on port 2       write to network queue(2)
      5 etc - unused
    - idle signifies that the ports are idle and there is no data
    to transfer. 
    - 1-4 will transfer a single 16-bit word ( from register 52) in either
    direction. reads will stop the computer while a word is read.
    writes will write the word to a queue. 
    - to make this work usefully we will wire up the read queue of
      client machine with the write queue of the server, and vice versa.
    - we could test this by breaking the primes program into two 
      parts - one is run on the server and the other on the client.
      (perhaps implemented on glitch) - the client would 
      perform the outer loop, and the server the inner loop.
- add an option to 'go blind' by removing the display from the computer.
- add option to speed up the computer by running say 96 gens before
  updating the display (the display would then update ALL non-blacks)      
 
  write(1, 1234); //will write 1234 to the console
    MOV 52 value
    MOV 51 port*2
    
         
          
        